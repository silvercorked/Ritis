
Graphics Pipeline:
1) Vertex/Index Buffer
	- stores points representing triangles
2) Input Assembler (Fixed Function)
	- groups vertexes into triangles
3) Vertex Shader (Programmable via GLSL)
	- transformations
3.1) Tessellation and Geometry (Programmable via GLSL)
	- ignored for now
4) Rasterization (Fixed Function)
	- breaks up geometry into fragments for each pixel triangle overlaps
5) Fragment Shader (Programmable via GLSL)
	- figures out each fragment based on lighting, color, .etc
6) Color Blending (Fixed Function)
	- Mixes multiple fragments in each pixel together
7) Frame Buffer
	- end result

1) Vertex Buffer Notes
	- its always an array-like structure, but how elements are grouped needs to be communicated to the pipeline
		- groupings associate a triangle with it's attributes (position vector, color, .etc)
		- if only attribute is position in the form of a vec2, then every two elements will be grouped to from a vertex of a triangle.
		- every 3 vertexes is a triangle.
		- could also have 2 as position and 3 as color.
	- interleaving is feasible, but bindings can also be done. 
		- binding basically make an additional input buffer and can be used to seperate attributes along input vectors.
		- bindings are created using vertex binding descriptions.
	- can mix interleaving and bindings.
		- for instance, binding 0 has the position and color (vec2, vec3) while binding 1 has the normal vector (vec3).
		- to avoid memory allocation costs in creating buffers per binding, often bindings are packed into a single buffer, but map to different regions in the buffer
	- vertex attribute descriptions require 4 values:
		- binding index
		- location
		- offset in bytes from vert start
		- vk format value describing format
		- example:
			- color (vec3)
			- binding = 0 (first buffer),
				location = 1 (cause vec 2 is at 0),
				offset = 8 (8 bytes cause vec2 is 8 bytes and is first),
				format = VK_Format_R32G32B32_SFLOAT
		- common DataTypes for format:
			- float: VK_FORMAT_R32SFLOAT
			- vec2: VK_FORMAT_R32G32SFLOAT
			- vec3: VK_FORMAT_R32G32B32_SFLOAT
			- vec4: VK_FORMAT_R32G32B32A32_SFLOAT
			- ivec2: VK_FORMAT_R32G32_SINT (singed integer)
			- uvec2: VK_FORMAT_R32G32_UINT (unsigned integer)
			- double: VK_FORMAT_R64_SFLOAT

Can send data from vertex shader to fragment shader, but first goes through rasterization.
layout(location = 0) out vec3 xColor; ------> layout(location = 0) in vec3 fragColor;
 - Rasterization stage will automatically interpolate any output vertex shader variables
 using Barycentric Coordinates into the fragment shader stage as in variables.
Barycentric Coordinates: alpha, beta, gamma
	let alpha = 1 - beta - gamma
	then P = alpha * a + beta * b + gamma * c; alpha + beta + gamma = 1
	b (beta = 1)
	|
	|
	|   P
	|  /
	| /
	a______________________c (gamma = 1)
	beta & gamma = 0
	the function P acts as a linear interpolation on the surface of a triangle
	scaled non orthogonal coordinate system
		basis vectors (b-a) & (c-a)
	P is inside the triangle iff 0 < alpha, beta, gamma < 1

Push Constants (alternative to descriptor sets and uniform buffers)
	- method of sending small amount of constant data to a shader rather than writes to memory or copy commands
	- can effectively be used to make duplicate draws with variations based on push constants (color for instance)
	- only 128 bytes guarenteed to be avilable for push constants (in vulkan). Some devices may give more, but depends.
	- Push Contant Range
		- Stage Flags
		- Offset
		- Size
		- Note: maxPushConstantsSize memory capacity is shared between all shader stages
			- one shared 128 byte push constant, or two 64 byte push contants (one for vertex and one for fragment), or another combination

	Descriptor set notes:
		- vulkan feature
		- descriptors are common in other systems but descriptor sets are vulkan specific
		- descriptors are pointers with metadata which points to resources
			- buffer descriptors might point to a uniform buffer containing the projection matrix or point light locations
			- image descriptors might point to image data like normal maps, texture maps, and others
		- point is, this data needs to be bound to the pipeline, but some change more than others
			- so a descriptor set is usually a set of descriptors that change at the same time
		- so projection matrix and point light locations dont change, so they can be put into one set and bound to the pipeline once
		- but model data, and model image maps change per model, so they are a set and need to be bound each time
		- if only 1 set was allowed, the projection matrix and point light descriptors would be rebound and allocated each time
		- descriptors set layouts inform vulkan what layout of descriptors to expect and their types
		- descriptors sets aren't created directly. Allocated from descriptor pools (reduces memory allocation costs)
		- tldr
			- descriptors point to resources and have some metadata
			- descriptors have to be grouped into sets to bind
			- descriptor set layouts need to be provided at pipeline creation time
			- descriptor sets need to be bound before draw calls
			- descriptor sets can only be created using a descripor pool object

	Point Lights
		- differ from directional lights because angle to light from vertex is not the same for all vertices
			- brightness (amount of light) hitting a vertex is also different, as distance from point is a factor
				- the rays of light are "attenuated"
			- brightness of a vertex given a point light is proportional to inv distance sqaured (1/(distance^2))
			- but some use a constant, linear, and quadratic term to achieve an artistic look (1/(c+l*distance+q*distance^2))

	Specular Models
		- Lambertian lighting model handles diffuse lighting and is viewer perspective independent but no specular
		- phong, blinn-phong, and gaussian specular models append onto Lambertian by adding specular light approximation
			- phong and blinn-phong both make up distributions, but guassian is more physically-based
			- phong and blinn-phong are easy to compute and guassian is hard to compute
			- phong fails to account for specular light produced when the angle from the reflected light and the viewer is greater than 90 degrees
				- blinn-phong corrects this using the half angle vector
		- control terms are often added to control the strength of lighting types (or as a parameter of the materials)